
declare
  v_total number :=0;
begin
  for i in 1..10 loop
	v_total := v_total+ i;
  dbms_output.put_line('Total is : ' || v_total);
  loop
	exit when i > 5;
	v_total :=v_total +i;
	dbms_output.put_line('Out of loop total is : ' || v_total);
  	exit;	#서브 루프를 빠져나온다. for loop문에서 빠져나오는 것이 아님.
 end loop;
end loop;
end;
/
------↑동일한 문장↓-------

declare
  v_total number :=0;
begin
  for i in 1..10 loop
	v_total := v_total+ i;
  dbms_output.put_line('Total is : ' || v_total);
  continue when i>5; 		#loop구조 안에서 조건이 true라면 밑의 로직은
	v_total :=v_total +i;	 수행하지 않고 메인 루프를 반복한다.
  dbms_output.put_line('Out of loop total is : ' || v_total);
 end loop;
end;
/
---------------------------------------------------

declare
  v_total number := 0;
begin
  <<toploop>>
  for i in 1..10 loop
  v_total := v_total+i;
  dbms_output.put_line('Total is : ' || v_total);

  for j in 1..10 loop
  continue toploop when i+j>5;    #→조건이 일치하면 레이블이 존재하는 문장으로 돌아가라.
  v_total := v_total+i;
  dbms_output.put_line(v_total);
 end loop;
end loop;
end;
/
---------------------------------------------------
##조합 데이터 유형##

declare
  v_dept_id departments.department_id%type;
  v_dept_name departments.department_name%type;
  v_mgr_id departments.manager_id%type;
  v_loc_id departments.location_id%type;	#작성하기 번거롭고 데이터가 큰 경우 문제
begin
  select *
  into v_dept_id, v_dept_name, v_mgr_id, v_loc_id
  from departments
  where department_id=10;
  dbms_output.put_line(v_dept_id || v_dept_name || v_mgr_id || v_loc_id);
end;
/

--↓↓---------------
-record 타입 :서로 다른 데이터 유형의 값을 저장

declare
  type dept_record_type is record
  (dept_id departments.department_id%type,
   dept_name varchar2(30), dept_mgr number,
	dept_loc number);
  v_rec dept_record_type;			#record type 선언

begin
  select *
  into v_rec
  from departments
  where department_id=10;
  dbms_output.put_line(v_rec.dept_id);
  dbms_output.put_line(v_rec.dept_name);
  dbms_output.put_line(v_rec.dept_mgr);
  dbms_output.put_line(v_rec.dept_loc);
end;
/
-----------------

declare
  v_rec departments%row%rowtype;	#컬럼기반으로 레코드 타입 선언
				  필드명은 해당 테이블의 컬럼명으로 작성된다.
begin
  select *
  into v_rec
  from departments
  where department_id=10;
  dbms_output.put_line(v_rec.department_id);
  dbms_output.put_line(v_rec.department_name);
  dbms_output.put_line(v_rec.manager_id);
  dbms_output.put_line(v_rec.location_id);
end;
/
-----------------

declare
  type dept_record_type is record
  (dept_id departments.department_id%type not null :=10,
   dept_name varchar2(30), dept_mgr number,
	dept_loc number, dept_rec departments%rowtype);
  v_rec dept_record_type;
#not null이라는 조건을 사용하려면 반드시 초기값을 설정 해줘야한다.
#~%type 조건은 타입과 사이즈만 받음. 제약조건 등은 받지 않는다.

begin
  select *
  into v_rec.dept_rec
  from departments
  where department_id=v_rec.dept_id;
  dbms_output.put_line(v_rec.dept_rec.department_id);
  dbms_output.put_line(v_rec.dept_rec.department_name);
  dbms_output.put_line(v_rec.dept_rec.manager_id);
  dbms_output.put_line(v_rec.dept_rec.location_id);
end;
/
---------------------------------------------------

begin
  update employees
  set salary = salary*1.1
  where employee_id=100;

  update employees
  set salary = salary*1.1
  where employee_id=200;
 rollback;
end;
/
---↓↓--------------

-배열 :데이터를 쌓아두고 후에 조작하기 위함.
         만일 당장 쓸 데이터들이라 하면 배열을 사용하지 않아도 된다.

declare
  type table_id_type is table of number index  by binary_integer;
  v_tab table_id_type;
begin
  v_tab(1) := 100;
  v_tab(2) := 200;

  update employees
  set salary =salary*1.1
  where employee_id=v_tab(1);

  update employees
  set salary = salary*1.1
  where employee_id=v_tab(2);
 rollback;
end;
/
-----------------
declare
  type table_id_type is table of number index  by binary_integer;
  v_tab table_id_type;
begin
  v_tab(1) := 100;
  v_tab(3) := 200;			#배열→데이터를 쌓아둔 상태

  for i in v_tab.first..v_tab.last loop	#v_tab.first :방들의 번호 요소 중 가장 작은 번호의 방
  update employees
  set salary =salary*1.1
  where employee_id=v_tab(i);
  end loop;
 rollback;
end;
/
#없는 배열 값을 참조하려고 하면 무조건 오류가 난다.
 →여기선 배열 안에 2번 요소가 없기 때문에 에러

-----------------
declare
  type table_id_type is table of number index  by binary_integer;
  v_tab table_id_type;
  v_name employees.last_name%type;
  v_sal employees.salary%type;
begin
  v_tab(1) := 100;
  v_tab(3) := 200;

  for i in v_tab.first..v_tab.last loop
  if v_tab.exists(i) then	#배열변수.exist(i) :i번 방이 존재하면 참, 존재하지 않으면 거짓.
  update employees
  set salary =salary*1.1
  where employee_id=v_tab(i)
  returning last_name, salary into v_name, v_sal;
  dbms_output.put_line (v_name || ' 사원의 급여가 ' || v_sal || ' 수정되었습니다.');
  else
  dbms_output.put_line(i || '요소번호가 없습니다.'); #2번에 대해 안내문 출력된다.
  end if;
  end loop;
 rollback;
end;
/
---------------------------------------------------

-1차원 배열 :단일 데이터를 쌓아놓고 조작하는 것. 오라클은 대부분 1차원 배열.

declare
  type num_type is table of number index by pls_integer;
  v_num num_type;
begin
    for i in 100..110 loop
    v_num(i) :=i;
    end loop;
  for i in v_num.first..v_num.last loop
  dbms_output.put_line(v_num(i));
 end loop;
end;
/
-----------------

-2차원 배열

declare
  type dept_rec_type is record
  (id number, name varchar2(30), mgr number, loc number);	#레코드 선언
  v_rec dept_rec_type;
  type dept_tab_type is table of v_rec%type index by pls_integer;	#배열타입 선언
  v_tab dept_tab_type;
begin
  for i in 1..5 loop
	select *
	into v_tab(i)
	from departments
	where department_id=i*10;
  end loop;

  for i in v_tab.first..v_tab.last loop
  dbms_output.put_line(v_tab(i).id);
 end loop;
end;
/
#2차원 배열을 만들고자 한다면 레코드 선언을 해줘야하며 이후 배열타입 선언을 해서 만든다.

-----↑같은 문장↓------------

declare
  type dept_rec_type is record
  (id number, name varchar2(30), mgr number, loc number);
  type dept_tab_type is table of dept_rec_type index by pls_integer;
  v_tab dept_tab_type;
begin
  for i in 1..5 loop
	select *
	into v_tab(i)
	from departments
	where department_id=i*10;
  end loop;

  for i in v_tab.first..v_tab.last loop
  dbms_output.put_line(v_tab(i).id || '  ' ||v_tab(i).name);	#(배열변수(요소번호).필드명)
 end loop;
end;
/
-----------------

declare
  type dept_tab_type is table of departments%rowtype index by pls_integer;
  v_tab dept_tab_type;
begin
  for i in 1..5 loop
	select *
	into v_tab(i)
	from departments
	where department_id=i*10;
  end loop;

  for i in v_tab.first..v_tab.last loop
  dbms_output.put_line(v_tab(i).department_id);
 end loop;
end;
/




























