select to_date('20180530 00:00:00.00000','yyyymmdd hh24:mi:ss.sssss') -> 문자를 숫자로 바꿔줌: 뒤 sssss는 환산한 값을 의미한다 즉, 1분 00060 
from dual;

select to_date('20180530 23:59:59.86399','yyyymmdd hh24:mi:ss.sssss') -> 하루의 끝
from dual;

-텍스터 마이닝

to_date: 문자 날짜를 날짜로 바꿔주는 함수

select to_timestamp('20180530 11:16:00','yymmdd hh24:mi:ss')
from dual; 

# timestamp는 9자리까지 나타내준다.


select to_timestamp('20180530 11:16:00.0','yymmdd hh24:mi:ss.s')
from dual; 
 
# timestamp에선 소수점 쪽 초는 s가 아니다. 그러므로 바꿔줘야 한다 ff로 (ff를 치면 무조건 9자리까지 나온다.)

select to_timestamp('20180530 11:16:00.123','yymmdd hh24:mi:ss.ff')
from dual; 


select to_timestamp('20180530 11:16:00.000000000','yymmdd hh24:mi:ss.ff')
from dual; 

select to_timestamp('20180530 11:16:00.999999999','yymmdd hh24:mi:ss.ff')
from dual; 

select to_char(systimestamp, 'ss.ff2') - ff2 2자리까지만 나타낸다.
from dual;

select to_char(systimestamp, 'ss.ff9') 
from dual;

# timestamp에선 (날짜형) 에서는 자리수 하는 것이 불가능 문자형으로 바꿔서 하는 것만 숫자를 적어서 원하는 소수점을 뽑는 것이 가능하다.

select to_char(to_date('95-10-27','rr-mm-dd'),'yyyy') - rr타입 20세기
from dual;


select to_char(to_date('95-10-27','yy-mm-dd'),'yyyy') - yy타입 현재연도를 기준으로 하여 값을 넣는다.
from dual;

# 여기서 문제는 yy를 쓰다보니 세기가 바뀌게 되는 문제가 나타나게 된다. 그래서 rr타입을 만든 것이다.
                       
                                  지정된 연도               
                                  0~49                                           50~99

# 현재연도 0~49            반환 날짜는 현재 세기를 반영                           반환 날짜는 이전 세기를 반영
          50~99            반환 날짜는 이후 세기를 반영                           반환 날짜는 현재 세기를 반영 


현재년도                   데이터입력날짜(지정된연도)           RR                       YY 
 

1994년                     95-10-27                             1995                    1995
1994년                     17-10-27                             2017                    1917
2001년                     17-10-27                             2017                    2017 ->연도 2개만 쓰면 문제점은 계속 나타날수 있다.
2048년                     52-10-27                             1952                    2052
2051년                     47-10-27                             2147                    2047 

 -> 그래서 rr타입을 쓰지 않는다. 그래서 날짜를 표현 할땐 꼭 yyyy 로 해서 넣는다. (위와 같이 에러가 나지않도록.!) 
★ yy -> 현재 연도의 세기를 반영한다.!

# 조건 제어문

if 조건 평가 then - nvl2 함수
	     참값1;
else
	     기본값1;
end if;


if 조건 평가 then - coalesce 함수
	     참값1;
else if 조건 평가 then (PL/SQL 경우 elsif)
	     참값2;
else if 조건 평가 then
	     참값3
else
	     기본값1;
end if;
       
if 조건 평가 then - nvl 함수
	     참값
end if;

# 조건부 표현식 (함수)

decode(함수),case(표현식)


if 기준값=비교값 then
	  참값
end if;

select last_name, job_id, salary,
	decode(job_id,'IT_PROG',salary*1.1
		      ,'ST_CLERK',salary*1.15 => else if와 같다
		      ,'SA_REP',salary*1.20
		      , salary) => else와 같다.
from employees;

# decode 함수 : decode(기준값,비교값,참 값), 기준 비교값에 해당하지 않는 값은 Null값이 나온다. <★ 기준값,비교값,참값은 필수로 필요하다 ★> 
		row 마다 값이 수행된다고 생각하면 된다.

select last_name, job_id, salary,
	case job_id
		when'IT_PROG'  then salary*1.1
		when'ST_CLERK' then salary*1.15
		when'SA_REP' then salary*1.20
          	else salary
	end 
from employees;

select last_name, job_id, salary,
	case 
		when job_id='IT_PROG'  then salary*1.1
		when job_id='ST_CLERK' then salary*1.15
		when job_id='SA_REP' then salary*1.20
          	else salary
	end 
from employees;

# case 함수 : case시작 end로 끝나는 함수 case 기준값
						when 비교값 then 비교값에 따른 참 값
					 end

# decode는 기준값과 비교값이 같다라고 하는 가정말고는 다른 연산자를 사용하는 것이 불가능하다.

# 단, case함수는 다르게도 표현이 가능하다.

select last_name,salary,
	case 
		when salary<5000 then 'low'
		when salary<10000 then 'medium'
		when salary<20000 then 'good'
		else
			'excellent'
	end
from employees;

# 다른 비교연산자를 사용해야 할 경우 case를 이용해 when값을 사용해 비교한다.
# decode 중첩, case 중첩도 가능하다.

# 단일행함수:문자함수,숫자함수,날짜함수,형변환함수,null관련된함수,조건표현식함수
# 그룹함수 : 여러행을 한꺼번에 처리하는 함수 (ex 최대값, 최소값)
		
# 최대값 max , 최소값 min : type에 영향을 받지 않는다.

max,min -> hire_date 최대값 : 가장 최근 입사, 최소값 : 가장 일찍 입사
 
select max(salary),min(salary)
from employees
where department_id=50;

# 함수 순서 where 절 먼저 실행 후 select문 실행

# 행의 수를 구하는 함수 count

select count(*) - *(아스트릭) 만 null 값을 포함에서 갯수를 센다.
from employees; 

select count(commission_pct) - 위의 값과 다른 이유 : null은 count값에 포함이 되지 않기 때문이다. (모두가 null)
from employees;
	       
select count(department_id) 
from employees;  

# 그룹함수의 주의할점: 보통 null 값을 포함하지 않는다. 전체 건수를 세야할 경우 primary key 행을 세는것이 좋다. 아스트릭은 null값도 세기때문에 좋지 않다.

# 합 sum : 인수값으로 numeric 만 가능하다. 나머지 문자,날짜는 불가능 하다.

select sum(salary) from employees where department_id=50;

# 평균 Avg : 자료의 중심 위치를 나타내는 대표값 측정.(평균, 중앙값, 최빈값), sql엔 중앙값이 존재하지 않는다.

select avg(salary) from employees;
select avg(commission_pct) from employees;

# 평균을 구할 때 주의할점: 수가 있는 값만 구한다. null값은 제외를 하므로 <즉, null을 제외한 평균이라고 표현한다.>
# 그래서 분석을 할 땐 결측지가 있는지 없는지 확인하는 것이 가장 중요하다.

select avg(nvl(commission_pct,0)) from employees; - null 값을 0 으로 만들어서 평균을 구하면 위와 값이 다른 것을 알 수 있다.

# 분산 variance : 데이터의 흩어짐 정도를 나타냄

select variance(salary) from employees;

# 표준편차 standard deviation,stddev : 분산의 제곱근

select stddev(salary) from employees;

select avg(salary)
from employees;

# 소그룹으로 분류를 하고 싶다면? select 절에만 적는 것이 아닌 group by에도 적어야 가능하다. ★ 기준이 되야할 컬럼들은 모두 group by절에 적어줘야 실행이 가능하다.

select department_id,avg(salary)
from employees
group by department_id;

select department_id,job_id,avg(salary)
from employees
group by department_id,job_id; 

select avg(salary)   -> 이렇게 해도 되나 어떤 것을 기준으로 평균을 구한건지 모르기 때문에 select에 모두 적어줘야 한다.
from employees
group by department_id,job_id;

select department_id dept_id,job_id,avg(salary) -> 이렇게 되면 실행되지 않는다. 이유는 실행 순서에 있는데 from 절 후 그룹화 된 곳을 보는데 그래서 select에서 한 별칭을 사용할 수 없다.
from employees
group by dept_id,job_id;

>수정<

select department_id dept_id,job_id,avg(salary)
from employees
group by department_id,job_id;

select department_id, sum(salary) -> from -> where -> group by -> select 순으로 돌아간다. 
from employees
where department_id<>10 ->where: 행을 제어하는절 
group by department_id;

select department_id, sum(salary) -> sum(salary)가 조건절에서 먼저 실행 되어 모두 오류가 뜬다. ★ 절대로 그룹함수를 제한할수 없다.
from employees
where sum(salary)>10000 
group by department_id;

# 그래서 나온 having 절! 그룹함수를 제어할 거라면 having 절을 사용한다.!


select department_id, sum(salary)
from employees
group by department_id
having sum(salary)>10000;

select department_id, sum(salary) -> sort group by 가 아니라 hash group by로 바뀌게 되어서 정렬은 되지 않는다. hash가 함수 속도가 빠르므로.
from employees
where department_id in (20,30,40,50)
group by department_id
having sum(salary)>10000;

# 총 순위 => 절들의 순서는 이렇게 꼭 순서맞게 써야 하고, 돌아가는 순서는 다르기 때문에 따로 알아놔야 한다.!

4 select department_id, sum(salary) 
1 from employees
2 where department_id in (20,30,40,50)
3 group by department_id
5 having sum(salary)>10000
6 order by 1;

# 부서별 최고 평균 값을 구했는데, 그 평균 값을 가지고 있는 부서값을 알고 싶다면? 서브쿼리로 해결해야한다!

select max(avg(salary));
from employees
group by department_id