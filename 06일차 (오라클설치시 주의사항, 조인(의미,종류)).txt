# Oracle 설치하고 사용하지 않고 싶을때 서비스를 중단 시켜서 사용하면 된다.
# 오라클이 접속 안될때 1. service xe(db를 시작시켜놓는 프로그램) 
		       2. OracleXETNSListener (연결해주는 프로그램) 두개 확인해서 실행 시키면 된다. 
  컴퓨터 - > 관리 -> 서비스 -> 시작유형을 수동으로 바꾸면 된다. 

select department_id,sum(salary)
from employees
where department_id in (10,20) - where 절은 index 검색을 유도한다.
group by department_id;

select department_id,sum(salary)
from employees
having department_id in (10,20) - full scan으로 바뀌게 된다.
group by department_id;

이렇게 나오는 이유는 where 은 행 제어 having 그룹을 제어 하기 때문에 그렇다. 두번째 실행순서에서 오류가 나오기 때문에 그렇다
having은 무조건 그룹함수제어 용도로만 사용한다.

case - select 문이나 where 에서만 사용가능
group by, order by 모두 같은 값으로 해서 정렬을 해야한다.

단일행 함수에 그룹화 함수를 넣는 것은 불가능 하다! decode(count) 예시 그러므로 count(case) or count(decode) 를 사용한다. -> 바깥에 있는 그룹함수 값으로 return 해서 준다.

41번 문제는 악성 프로그램이다 이유는, decode, case 하나 하나 한줄당 전체의 갯수를 파악하는 것이기 때문이다.

# 정규화 - 테이블을 조각낸다. (중복성을 없애기 위해서)

#  ★ Join - 두개이상의 테이블에서 데이터를 가져오는 방법 ★
1족 집합 - 중복되지 않는 열 값들.
m족 집합 - join 할 땐 m 족집합의 맞게 나온다.

select last_name, department_name
from employees, departments ;

갯수가 초과해서 나온다: cartesian product (107 개 * 27 개 를 한 값이 나온다.) -> 조인조건이 생략된 경우나 조인조건이 잘못된 경우 발생한다.
										 첫번째 테이블의 모든 행이 두번째 테이블의 모든 행에 조인된다.

-해결 방법-
(유효한 조인 만들기) - 조인의 유형

1. equi join(inner join, simple join, 등가조인) - 각 테이블의 일치되는 열 값을 통해 join 하는 방법 (각 join key값이 일치되는 데이터들만 나온다.)
<where은 행을 제어 하면서 조인조건을 사용할 수 있다>

select last_name, department_name
from employees , departments  
where department_id=department_id; => 오류가 난다 (sementic error)

# select 문 수행하면 parsing 작업을 한다
문법,의미분석
1. 문법 체크
2. 오류를 체크 할시 첫번째 from절에 있는 object 오류부터 체크한다.
3. column 절 체크 - select절에 있는 값을 모든 from 값에 체크를 한다. (where 절도 마찬가지) -> column 오류 나는건 의미분석의 경우가 있는데 그게 sementic error이다.
->from 테이블 명을 앞에 붙여서 의미모호성을 해결한다.
# 테이블 명은 최대 30자까지 있는데 테이블 명을 다 붙여서 하다보면 너무 길어져 메모리 사용이 커진다. -> 그래서 별칭을 붙인다.!
# 주의점 : 별칭을 했을 땐 모두 별칭으로 해야 에러가 나지 않는다.!
# syntax error
# sementic error

select employees.last_name, departments.department_name
from employees, departments
where employees.department_id=departments.department_id;


select e.last_name, d.department_name
from employees e, departments d
where e.department_id=d.department_id;     -> 별칭을 통해서 메모리를 줄인다!

desc locations; => 회사의 주소가 나타나있는 테이블
 
# 만약 필드가 겹치는 것이 없다면 연결다리를 만들어서 다른 필드를 통해 연결하면 특정한 값을 구할수 있다.

select e.last_name, l.city
from employees e, departments d, locations l
where e.department_id=d.department_id - (조인조건술어)
and d.location_id=l.location_id;

- 테이블에서 기본키가 되는 값이 1족 집합 외래키쪽으로 되는 것은 m족 집합이다.
- 수정을 할 땐 기본키가 되는 (1족 집합) 이 되는 곳으로 해서 수정을 해야한다.
- equi 조인을 다 해도 무조건 값이 다 나오진 않는다. (Null 이 나오거나 품질나쁜 데이터가 있어 값이 나올수 있기 때문이다.)
- 따라서 모두 desc 를 해보고 속아내는 작업을 해야한다. (데이터 정제)
- 조인조건술어는 조인하려는 테이블 n개당 n-1개 나온다.

select e.last_name, d.department_name
from employees e, departments d
where e.department_id=d.department_id
and e.department_id=10; -> 비조인조건술어

select e.last_name, d.department_name
from employees e, departments d      =>개선 된 것, 조인조건 술어를 굳이 쓸 필요가 없다.
where d.department_id=10
and e.department_id=10; 

배달의민족_우아한형제 - 책 

2. self join - 자기자신의 테이블을 찾아보는 것, 서로 참조하여 찾아야 할 때 ★ 테이블에서 각각 나누어서 값을 찾아야 한다.

select employee_id,last_name,manager_id
from employees; 


self join
select w.employee_id,w.last_name,m.employee_id,m.last_name
from employees w, employees m
where w.manager_id=m.employee_id;

col last_name format a20 -> 문자가 들어가는 경우 a가 들어감

select employee_id,manager_id => 사원 테이블이라 가정
from employees
order by 2;

select employee_id, last_name => 관리자 테이블이라 가정
from employees
order by 1;

3. outer join(+) - join key 값이 일치되지 않는 값도 뽑아내는 것을 의미 , 부호를 사용, 일치되지 않는 쪽에 (+) 기호를 넣는다. ★ 문제파악이 중요하다. 생각한거의 반대에 (+)

select e.last_name, d.department_name
from employees e, departments d 
where e.department_id=d.department_id; -> key값이 일치하는 값만 나오는데 1개가 누락되있는 것을 의미

select e.last_name, d.department_name
from employees e, departments d 
where e.department_id(+)=d.department_id; -> 부서는 있으나 사원이 없는 값들도 모두 나옴

select e.last_name, d.department_name
from employees e, departments d 
where e.department_id=d.department_id(+); -> 사원은 있으나 부서에 속하지 않은 값도 모두 나온다.

* 양쪽에서 (+)는 할 수없다. 

# 집합 연산자 union : 중복을 제거해서 합치는 연산자
	      union all : 중복되는 값도 다 나오게 하는 연산자

select e.last_name, d.department_name
from employees e, departments d 
where e.department_id(+)=d.department_id
union  -> union 을 할 때 sort가 발생되서 데이터가 크면 힘들다.
select e.last_name, d.department_name
from employees e, departments d 
where e.department_id=d.department_id(+);

select e.last_name, d.department_name
from employees e, departments d 
where e.department_id(+)=d.department_id
union all 
select e.last_name, d.department_name
from employees e, departments d 
where e.department_id=d.department_id(+);

# 2개 이상 조인을 할 때 외부조인을 쓰려면 그림을 그려서 생각한다.!

select e.last_name, l.city
from employees e, departments d, locations l
where e.department_id=d.department_id(+) - 여기도 null 이니 location도 null 
and d.location_id=l.location_id(+);

sql 아이콘 새창

CREATE TABLE job_grades
( grade_level varchar2(3),
  lowest_sal  number,
  highest_sal number); - 테이블 생성

INSERT INTO job_grades VALUES ('A',1000,2999);
INSERT INTO job_grades VALUES ('B',3000,5999);
INSERT INTO job_grades VALUES ('C',6000,9999);
INSERT INTO job_grades VALUES ('D',10000,14999);
INSERT INTO job_grades VALUES ('E',15000,24999);
INSERT INTO job_grades VALUES ('F',25000,40000);
commit; - 영구 저장

drop table job_grades purge;

f5 - 전체 script compile

4. non equi join (비등가 조인) - equi 가 되지 않을 때 사용하는 조인, 범위적으로 찾는 equi join 을 말한다. 키 값이 딱 떨어지지 않고 범위를 찾아서 하는 join

select last_name, salary
from employees;

select * 
from job_grades;

select e.last_name,e.salary,j.grade_level
from employees e,job_grades j
where e.salary between j.lowest_sal and j.highest_sal;