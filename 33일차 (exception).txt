

## exception

1. 실행 중에 발생한 pl/sql 오류.
2. oracle에 의해 암시적으로 발생.
3. 프로그램에 의해 명시적으로 발생.

select * from employees where employee_id=입력변수
→암시적 커서(반드시 한 개의 row만 fetch 해야한다.)

var b_id number
exec :b_id :=300

declare

  v_rec employees%rowtype;

begin
	select * into v_rec
	from employees where employee_id= :b_id;
        dbms_output.put_line(v_rec.employee_id || '  ' || v_rec.last_name);

end;
/

# from employees~ 지점에서 오류 :no data found>비정상적 종료
# ORA-01403<이 오류 번호에 따른 세션 이름→no data found
------------------------

var b_id number
exec :b_id :=300

declare
  v_rec employees%rowtype;

begin
	select * into v_rec
	from employees where employee_id= :b_id;
  dbms_output.put_line(v_rec.employee_id || '  ' || v_rec.last_name);

exception
	when no_data_found then	#오류 번호를 넣는 것이 아닌 이름으로 작성해준다.
	dbms_output.put_line(:b_id || '사원은 존재하지 않습니다.');
end;
/

# exception은 필수절은 아니나 실행 중에 발생한 오류에 해당하는 이름과 함께
  해당 오류를 처리할 수 있는 문장을 작성한다→(오류 이름+처리 방법)
-------------------------------------------------------------

var b_id number
exec :b_id :=20

declare
  v_rec employees%rowtype;

begin
	select * into v_rec
	from employees where department_id= :b_id;
  dbms_output.put_line(v_rec.department_id || '  ' || v_rec.last_name);
end;
/
------------------------

var b_id number
exec :b_id :=20

declare
  v_rec employees%rowtype;

begin
	select * into v_rec
	from employees where department_id= :b_id;
  dbms_output.put_line(v_rec.employee_id || '  ' || v_rec.last_name);

exception
	when no_data_found then
	dbms_output.put_line(:b_id || '사원은 존재하지 않습니다.');
	when too_many_rows then
	dbms_output.put_line('부서에 사원들이 여러명이므로 명시적 커서를 이용하라');
end;
/
------------------------

declare
  v_rec employees%rowtype;

begin
	select * into v_rec
	from employees where employee_id=300;
  dbms_output.put_line(v_rec.employee_id || '  ' || v_rec.last_name);

end;
/
#ORA-01403: no data found
→단일행 select 데이터를 반환하지 않았을 때, 없는 배열 요소를 참조하려고 할 때
------------------------

declare
  v_rec employees%rowtype;

begin
	select * into v_rec
	from employees where employee_id=300;
        dbms_output.put_line(v_rec.employee_id || '  ' || v_rec.last_name);

exception
	when no_data_found then
	dbms_output.put_line('사원이 존재하지 않습니다.');
end;
/
-------------------------------------------------------------
#오류가 발생/발생하지 않아도(=공통적으로) 특정 로직을 실행해야하는 경우
→서브블락 사용

declare
  v_rec employees%rowtype;

begin

    begin
	select * into v_rec
	from employees where employee_id=100;

    exception

	when no_data_found then
	dbms_output.put_line('사원이 존재하지 않습니다.');
    end;

  dbms_output.put_line(v_rec.employee_id || '  ' || v_rec.last_name); #공통적으로 수행할 로직

end;
/
-------------------------------------------------------------

select salary from employees where department_id=20;

declare

  v_rec employees%rowtype;

begin

  update employees set salary=salary*1.1 where department_id=20;
  select * into v_rec from employees where department_id=20;
  dbms_output.put_line(v_rec.last_name);

end;
/

select salary from employees where department_id=20;

#프로그램이 비정상적으로 종료(=오류)되었으므로 transaction은 자동 롤백된다.

------------------------

select salary from employees where department_id=20;

declare

  v_rec employees%rowtype;

begin

  update employees set salary=salary*1.1 where department_id=20;
  select * into v_rec from employees where department_id=20;
  dbms_output.put_line(v_rec.last_name);

exception
  when too_many_rows then
  dbms_output.put_line('여러 건의 row를 fetch 할 수 없다.');

end;
/

select salary from employees where department_id=20; # 변화값 확인

# exception의 유무에 따라 transaction이 자동 롤백 되었는지 변화가 되었는지
  확인 가능한데 바로 위의 문장은 exception 처리를 했기 때문에 update문장은
  살아있다. 따라서 commit할 것인지 rollback할 것인지 판단을 내려야 한다.

------------------------

select salary from employees where department_id=20;

declare

  v_rec employees%rowtype;

begin

  update employees set salary=salary*1.1 where department_id=20;
  select * into v_rec from employees where department_id=0;
  dbms_output.put_line(v_rec.last_name);

exception

  when too_many_rows then
  dbms_output.put_line('여러 건의 row를 fetch 할 수 없다.');
  when others then	
  dbms_output.put_line('잠 좀 깨라');
  dbms_output.put_line(sqlcode);	# 현재 발생한 오류 번호 출력
  dbms_output.put_line(sqlerrm);	# 발생한 오류 코드+메세지

end;
/

select salary from employees where department_id=20;

# 정의를 다 했는데도 걸리지 않는다면 가장 마지막에, 걸릴 수 있도록 exception절에 others 사용
# 만일 department_id=20d이어서 too_many_rows란 예상이 발생했다면
  exception절의 when too_many_rows에 걸린다. 

# transaction은 살아있음
# sqlcode : 100 = sqlerrm : ORA-01403: no data found
# 100=no data found
     1=사용자가 정의한 exception
     이외에는 sqlcode는 전부 음수로 출력된다.

------------------------

select salary from employees where department_id=20;

declare

  v_rec employees%rowtype;

begin

  update employees set salary=salary*1.1 where department_id=20;
  select * into v_rec from employees where department_id=20;
  dbms_output.put_line(v_rec.last_name);

exception

  when others then	
  dbms_output.put_line('잠 좀 깨라');
  dbms_output.put_line(sqlcode);
  dbms_output.put_line(sqlerrm);

end;
/

#sqlcode : -1422 = sqlerrm :  ORA-01422: exact fetch returns more than requested number of rows
-------------------------------------------------------------

delete from employees where department_id=20;
delete from departments where department_id=20;

# primary key는 만일 특정 값이 참조 되어지고 있다면 삭제 불가능

delete from departments where department_id=270;

begin

  delete from departments where department_id=20;

exception

  when others then
  dbms_output.put_line(sqlcode);
  dbms_output.put_line(sqlerrm);

end;
/
------------------------

declare
  
  pk_error exception;	#exception 이름을 선언 :설정한 이름+키워드
  pragma exception_init(pk_error, -2292);

begin  

  delete from departments where department_id=20;

exception

  when pk_error then dbms_output.put_line('이 값을 참조하는 row들이 있습니다.');
  when others then
  dbms_output.put_line(sqlcode);
  dbms_output.put_line(sqlerrm);

end;
/

# pragma exception_init(pk_error, -02292); :pragma+exception_init(exception 명, 오류번호)
  →pragma exception_init :괄호 안의 이름과 오류 번호를 붙이는 작업
  →오라클 오류 번호는 있는데 이름이 없는 경우 사용한다

# exception 이름에 대한 표준화가 필요하기 때문에 주로 패키지를 이용(=표준화)한다.

-------------------------------------------------------------
# 사용자가 명시적으로 exception을 설정한 경우

declare

  e_invalid exception;

begin
  update employees set salary=salary*1.1 where employee_id=300;

  if sql%notfound then
  raise e_invalid;	#사용자가 명시적으로 발생시키는 exception
  end if;

exception

  when e_invalid then
  dbms_output.put_line('수정된 데이터가 없습니다.');  #만일 아무 작업도 하고 싶지 않다면 이 문장 대신
end;						null로 작성하면 끝난다.
/

# raise+exception명 =>raise문을 만나는 순간 무조건 exception절로 보내버림
# raise 뒤엔 반드시 exception 명칭을 써줘야 한다.

------------------------

begin

  update employees set salary=salary*1.1 where employee_id=300;
  if sql%notfound then
  raise_application_error(-20000, '수정된 데이터가 없다.');
  end if;

end;
/

# raise_application_error :프로시저 문장
  →만나는 순간 비정상적인 종료가 된다.

# 사용자가 설정할 수 있는 오류 번호는 -20000 ~ -20999까지이고 오류 메세지는 2000자까지 가능
  (한글은 2바이트 기준 1000자, 3바이트 기준 666자)

------------------------

declare
  v_rec employees%rowtype;
begin
  select * into v_rec from employees where department_id=300;
exception
	when no_data_found then
	raise_application_error(-20000, '조회 데이터가 없다', true);
end;
/
----------
declare

  v_rec employees%rowtype;

begin

  select * into v_rec from employees where department_id=300;

exception

	when no_data_found then
	raise_application_error(-20000, '조회 데이터가 없다', false);
end;
/

#결과

ORA-20000: 조회 데이터가 없다
ORA-01403: no data found
----------
ORA-20000: 조회 데이터가 없다

→ raise_application_error에 true를 적어주면 오라클 자체의 오류코드와 메세지도 같이 출력
→ raise_application_error에 false를 적어주면 사용자가 설정한 오류코드와 메세지만 출력
→ 만일 세 번째 인수를 따로 설정하지 않는다면 기본값은 false













