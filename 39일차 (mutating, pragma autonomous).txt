create or replace function query_call_sql
(p_a in number)
return number
is
	v_sal number;
begin
	select salary into v_sal 
	from employees
	where employee_id = 170;
	return p_a + v_sal;
end query_call_sql;
/

exec dbms_output.put_line(query_call_sql(1000));

update employees
set salary = query_call_sql(10000)
where employee_id=101;

ORA-04091: table HR.EMPLOYEES is mutating, trigger/function may not see it
ORA-06512: at "HR.QUERY_CALL_SQL", line 7

# mutating - 함수를 만들 땐 전혀 문제가 없지만 이 함수를 표현식으로 표현할 때, update 문에서 사용할 때 write와 read를 같이 하게 되면
	     오류가 걸린다. 타이밍을 몰라서 오류가 걸린다. (읽는것을 먼저해야할지 쓰는것을 먼저 해야할지 모를 때 오류가 발생)
	     (read, read 는 가능하지만 read write, write write는 불가능하다.) 

# 동일한 테이블에 작업을 할 시 부작용이 나올 수 있으니 주의해야한다. ★

create table log_table
(username varchar2(30), day timestamp, message varchar2(100));

create table temp_table(n number);

create or replace procedure log_message(p_message varchar2) -- message를 입력으로해서 log table에 excute 하는 값
is
begin
	insert into log_table(username,day,message)
	values(user,current_date,p_message);
	commit;
end;
/

select * from log_table;
select * from temp_table;


begin
	insert into temp_table(n) values(100);
	
	log_message('불금하자');
end;
/

select * from log_table;
select * from temp_table;

USERNAME                                                     DAY
------------------------------------------------------------ ---------------------------------
MESSAGE
----------------------------------------------------------------------------------------------
HR                                                           18/07/20 15:26:11.000000
불금하자

         N
----------
       100

rollback;


select * from log_table;
select * from temp_table;

USERNAME                                                     DAY
------------------------------------------------------------ ---------------------------------
MESSAGE
----------------------------------------------------------------------------------------------
HR                                                           18/07/20 15:26:11.000000
불금하자

         N -- rollback 했으나 살아있다. 
----------
       100

# 주의할 점 : 프로시저안에서 commit을 했다고 해서 안에만 commit이 되는거 아니라 처음에 쓴 dml 부터 영향을 주기 때문에 주의를 해야한다.

delete from temp_table;
delete from log_table;
commit;

# 지시어 (명령문) <pragma autonomous_transaction> - 독립 트랜잭션 범위, 밖의 프로시저에는 영향을 주지 않는다.(oracle 9i버젼)
						    이 지시어가 있는 트랜잭션에는 반드시 rollback 또는 commit이 있어야 가능하다.
						   - 호출단위 프로그램일 경우에만 사용이 가능하다.
 
create or replace procedure log_message(p_message varchar2) -- message를 입력으로해서 log table에 excute 하는 값
is
	pragma autonomous_transaction;
begin
	insert into log_table(username,day,message)
	values(user,current_date,p_message);
	commit;
end;
/

select * from log_table; --조회
select * from temp_table;

begin
	insert into temp_table(n) values(100);
	
	log_message('불금하자');
end;
/

rollback;

select * from log_table; --조회
select * from temp_table; -- 이값은 rollback이 되어있다.


# commit 또는 rollback을 넣지않고 트랜잭션을 create 하고 실행한 경우 오류가 발생한다.

SQL> begin
  2     insert into temp_table(n) values(100);
  3
  4     log_message('불금하자');
  5  end;
  6  /
begin
*
ERROR at line 1:
ORA-06519: active autonomous transaction detected and rolled back
ORA-06512: at "HR.LOG_MESSAGE", line 8
ORA-06512: at line 4

# 응용 : 트리거에서 commit 에 상관없이 값을 적용시키는 방법 - 이것도 독립적으로 되서 commit이 가능하다.

CREATE OR REPLACE TRIGGER sal_audit
AFTER UPDATE OF salary ON employees
FOR EACH ROW
WHEN (old.salary != new.salary)
declare
	pragma autonomous_transaction;
BEGIN
  
    INSERT INTO audit_emp_sal(name, day, id, old_sal, new_sal) 
    VALUES(user,systimestamp, :new.employee_id, :old.salary, :new.salary);
  	commit;
END sal_audit;
/

CREATE OR REPLACE TRIGGER sal_audit -- 오류발생 <만들땐 나지 않고 트리거에 관련된 실행을 했을 경우 오류가 난다.>
AFTER UPDATE OF salary ON employees
FOR EACH ROW
WHEN (old.salary != new.salary)
BEGIN
  
    INSERT INTO audit_emp_sal(name, day, id, old_sal, new_sal) 
    VALUES(user,systimestamp, :new.employee_id, :old.salary, :new.salary);
  	commit;
END sal_audit;
/




