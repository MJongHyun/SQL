use_nl_with_index(테이블이름, 인덱스이름) -- 어떤 index를 타는게 더 효과적인지를 알 때 사용하는 것

use_nl(테이블) index(테이블 이름 index이름) 

# Sort merge join

- 조인되는 건수가 많을 때 유리하다.
- sort에 대한 성능문제가 발생할 수 있다.
- 힌트 : use_merge

select e.last_name, e.salary, d.department_name
from emp e,dept d
where e.department_id=d.department_id; -- 두개로 분리후 merge하는 것을 의미

select last_name, salary, department_id -- 1족을 가지고 m 족을 search 하는 것이 좋다. 
from emp
order by department_id;

select department_id, department_name
from dept
order by department_id;

select * from table(dbms_xplan.display_cursor(null,null,'allstats last'));

---------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                    | Name        | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
---------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |             |      1 |        |    106 |00:00:00.01 |      15 |       |       |          |
|   1 |  MERGE JOIN                  |             |      1 |    106 |    106 |00:00:00.01 |      15 |       |       |          |
|   2 |   TABLE ACCESS BY INDEX ROWID| DEPT        |      1 |     27 |     27 |00:00:00.01 |      12 |       |       |          | --부서
|   3 |    INDEX FULL SCAN           | DEPT_ID_IDX |      1 |     27 |     27 |00:00:00.01 |       6 |       |       |          | -- outer
|*  4 |   SORT JOIN                  |             |     27 |    107 |    106 |00:00:00.01 |       3 | 15360 | 15360 |14336  (0)|
|   5 |    TABLE ACCESS FULL         | EMP         |      1 |    107 |    107 |00:00:00.01 |       3 |       |       |           | -- inner
---------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
       filter("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")

★★  sort도 join의 순서가 중요하다

full scan을 하는 이유 : 어차피 1족을 전체 봐야 하므로 full scan으로 확인을 해야한다.
3. 27번이 일어나야 되나 6번만 일어난 이유 :buffer pin 

2. index가 걸려있는 값을 사용한거기 때문에 sort가 사용되지 않는다.

6. emp_id로 어차피 salary나 last_name을 가져와야 되므로 random i/o가 많이 발생해서 table full scan으로 나온다
그러나 과부하 발생의 원인이다/



Merge : 1족에서 m족으로 스캔하는것을 의미 (중요)★ - 키값이 일치해서 값을 가져올 수 있다. (그러니 join이 되는것)

값을 다 찾으면 표시자를 해놓고 다음값은 표시자 다음부터 값을 찾는것을 의미한다.

대용량 , 조인문은 hash or merge로 푼다.

문제점 : order by 절을 사용해야한다. (무조건 sort를 한다.) 

driving 의 조건: 1. 1족집합 2. 데이터의 값이 적은것을 의미

outer = first - first는 작은 테이블로 잡고, sort를 하지 않는다. 왜냐하면 random i/o를 많이 발생해야 하기 때문에.
inner = second

select /*+ leading(d,e) use_merge(e) */e.last_name, e.salary, d.department_name -- ((/*+ leading (순서제어) use_merge(후행) */))
from emp e,dept d
where e.department_id=d.department_id;
조인 키 컬럼으로 해서 값을 잡아야 한다.
무엇을 first를 할 것인가 : departments (department_id 1족)

Plan hash value: 897895752

---------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                    | Name        | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
---------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |             |      1 |        |    106 |00:00:00.01 |      15 |       |       |          |
|   1 |  MERGE JOIN                  |             |      1 |    106 |    106 |00:00:00.01 |      15 |       |       |          |
|   2 |   TABLE ACCESS BY INDEX ROWID| DEPT        |      1 |     27 |     27 |00:00:00.01 |      12 |       |       |          |
|   3 |    INDEX FULL SCAN           | DEPT_ID_IDX |      1 |     27 |     27 |00:00:00.01 |       6 |       |       |          |
|*  4 |   SORT JOIN                  |             |     27 |    107 |    106 |00:00:00.01 |       3 | 15360 | 15360 |14336  (0)|
|   5 |    TABLE ACCESS FULL         | EMP         |      1 |    107 |    107 |00:00:00.01 |       3 |       |       |          |
---------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
       filter("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")



m족을 first로 잡은 경우 - 틀린경우 


select /*+ leading(e,d) use_merge(d) */e.last_name, e.salary, d.department_name 
from emp e,dept d
where e.department_id=d.department_id;

Plan hash value: 3406566467

-----------------------------------------------------------------------------------------------------------------
| Id  | Operation           | Name | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
-----------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT    |      |      1 |        |    106 |00:00:00.01 |       5 |       |       |          |
|   1 |  MERGE JOIN         |      |      1 |    106 |    106 |00:00:00.01 |       5 |       |       |          |
|   2 |   SORT JOIN         |      |      1 |    107 |    107 |00:00:00.01 |       3 | 15360 | 15360 |14336  (0)|
|   3 |    TABLE ACCESS FULL| EMP  |      1 |    107 |    107 |00:00:00.01 |       3 |       |       |          | -- 여기선 buffer pin이 많아서 버퍼가 작지만 보통은 많지 않다. 그래서 부하가 많이 발생한다.
|*  4 |   SORT JOI0N         |      |    107 |     27 |    106 |00:00:00.01 |       2 |  2048 |  2048 | 2048  (0)| 
|   5 |    TABLE ACCESS FULL| DEPT |      1 |     27 |     27 |00:00:00.01 |       2 |       |       |          |
-----------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
       filter("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")

sort도 좋지 않다 이유는 cpu 사용량이 너무 많이 발생하기 때문에 좋지않다.

select /*+ leading(e,d) use_merge(d) full(e) full(d) */e.last_name, e.salary, d.department_name - first에 sort를 하고 싶다면 full 로 진행한다.
from emp e,dept d
where e.department_id=d.department_id;


select /*+ leading(e,d) use_merge(d) index(e  EMP_DEPT_ID_IDX)*/e.last_name, e.salary, d.department_name -- 강제로 index 실행 
from emp e,dept d
where e.department_id=d.department_id;


Plan hash value: 1387760006

-------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                    | Name            | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
-------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |                 |      1 |        |    106 |00:00:00.01 |      25 |       |       |          |
|   1 |  MERGE JOIN                  |                 |      1 |    106 |    106 |00:00:00.01 |      25 |       |       |          |
|   2 |   TABLE ACCESS BY INDEX ROWID| EMP             |      1 |    107 |    106 |00:00:00.01 |      23 |       |       |          | - random i/o 행위 자체가 오라클에선 무리가 되므로
|   3 |    INDEX FULL SCAN           | EMP_DEPT_ID_IDX |      1 |    106 |    106 |00:00:00.01 |       8 |       |       |          |     작은 테이블로 하는것이 좋다. 
|*  4 |   SORT JOIN                  |                 |    106 |     27 |    106 |00:00:00.01 |       2 |  2048 |  2048 | 2048  (0)|
|   5 |    TABLE ACCESS FULL         | DEPT            |      1 |     27 |     27 |00:00:00.01 |       2 |       |       |          |
-------------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
        filter("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")


select /*+ leading(d,e) use_merge(e) full(e) full(d) */e.last_name, e.salary, d.department_name -- 값이 위와 같다
from emp e,dept d
where e.department_id=d.department_id;


Plan hash value: 1407029907

-----------------------------------------------------------------------------------------------------------------
| Id  | Operation           | Name | Starts | E-Rows | A-Rows |   A-Time   | Buffers |  OMem |  1Mem | Used-Mem |
-----------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT    |      |      1 |        |    106 |00:00:00.01 |       5 |       |       |          |
|   1 |  MERGE JOIN         |      |      1 |    106 |    106 |00:00:00.01 |       5 |       |       |          |
|   2 |   SORT JOIN         |      |      1 |     27 |     27 |00:00:00.01 |       2 |  2048 |  2048 | 2048  (0)|
|   3 |    TABLE ACCESS FULL| DEPT |      1 |     27 |     27 |00:00:00.01 |       2 |       |       |          |
|*  4 |   SORT JOIN         |      |     27 |    107 |    106 |00:00:00.01 |       3 | 15360 | 15360 |14336  (0)|
|   5 |    TABLE ACCESS FULL| EMP  |      1 |    107 |    107 |00:00:00.01 |       3 |       |       |          |
-----------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")
       filter("E"."DEPARTMENT_ID"="D"."DEPARTMENT_ID")

  
# clusetering이 좋으면 full 이 더 좋을 수도 있다.

