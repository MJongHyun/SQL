


## 조합데이터 유형 :스칼라 유형과는 달리 다중값을 보유 할 수 있다.

1. 레코드 타입 :서로 다른 데이터 유형의 값을 저장
2. 배열 :동일한 데이터 유형의 값을 저장
	
	(1) index by table :연관 배열
	(2) nested table :중첩 테이블
	(3) varray

---------------------------------------------------------

# index by table#

declare

  type tab_char_type is table of varchar2(10) index by pls_integer;
  v_city tab_char_type;	#v_city는 문자형 배열변수를 따라간다

begin

  v_city(1) := '서울';
  v_city(2) := '대전';
  v_city(3) := '부산';
  v_city(4) := '광주';

  dbms_output.put_line(v_city.count);
  dbms_output.put_line(v_city.first);
  dbms_output.put_line(v_city.last);
  dbms_output.put_line(v_city.next(1));	# next(i) :i번 배열 후 배열
  dbms_output.put_line(v_city.prior(2));	# prior(i) :i번 배열 전 배열

  v_city.delete(3);	# 3번 배열 삭제/만일 요소 번호를 지정하지 않으면 배열 전부 삭제
  v_city.delete(1, 3)	;	# 1번부터 3번까지의 배열을 삭제한다.

  for i in v_city.first..v_city.last loop
  if v_city.exists(i) then dbms_output.put_line(v_city(i));
  else dbms_output.put_line(i || ' 요소가 존재하지 않습니다.');
 end if;
 end loop;	#~.exists(i) :배열 삭제 후 no data found를 예방하기 위함
end;
/
---------------------------------------------------------

#nested table#
1. index by table을 삭제→요소번호는 자동으로 설정이 된다(최대 2G)
2. index by table과 동일한 기능을 수행하나 2G만 저장 가능하므로
   만일 저장해야할 공간이 2G가 넘는다면 index by table을 사용해야한다.
3. 배열 안에 들어가는 값을 사전에 알고 있는 경우

declare
  type tab_char_type is table of varchar2(10);	#배열 타입 선언
  v_city tab_char_type := tab_char_type('서울', '대전', '부산', '광주');
begin		       #타입을 반드시 작성해야한다.

  dbms_output.put_line(v_city.count);
  dbms_output.put_line(v_city.first);
  dbms_output.put_line(v_city.last);
  dbms_output.put_line(v_city.next(1));
  dbms_output.put_line(v_city.prior(2));

  --v_city.delete(3);
  --v_city.delete(1, 3);

  for i in v_city.first..v_city.last loop
  if v_city.exists(i) then dbms_output.put_line(v_city(i));
  else dbms_output.put_line(i || ' 요소가 존재하지 않습니다.');
 end if;
 end loop;
end;
/

-------------------------

declare
  type tab_char_type is table of varchar2(10);
  v_city tab_char_type := tab_char_type('서울', '대전', '부산', '광주');
begin			#nested table은 선언한 순간 고정이 된다

  dbms_output.put_line(v_city.count);
  dbms_output.put_line(v_city.first);
  dbms_output.put_line(v_city.last);
  dbms_output.put_line(v_city.next(1));
  dbms_output.put_line(v_city.prior(2));

  v_city.extend(1);		#배열 변수를 추가하고자 할 때 extend로 확장 이후 추가해야함.
			  확장 이후에는 직접 요소 번호를 작성해줘야한다.
  v_city(5) :='대구';		#따라서 이렇게 작성하면 에러 발생

  for i in v_city.first..v_city.last loop
  if v_city.exists(i) then dbms_output.put_line(v_city(i));
  else dbms_output.put_line(i || ' 요소가 존재하지 않습니다.');
 end if;
 end loop;
end;
/
-------------------------

declare
  type tab_char_type is table of varchar2(10);
  v_city tab_char_type := tab_char_type('서울', '대전', '부산', '광주');
begin

  dbms_output.put_line(v_city.count);
  dbms_output.put_line(v_city.first);
  dbms_output.put_line(v_city.last);
  dbms_output.put_line(v_city.next(1));
  dbms_output.put_line(v_city.prior(2));

  v_city.delete(3);	#삭제된 배열 안에는 넣을 수 있으나 3번이 삭제된 상태에서
  v_city(3) :='대구';	  v_city(5) :='대구';라면 에러 발생→확장을 해줘야 한다.

  for i in v_city.first..v_city.last loop
  if v_city.exists(i) then dbms_output.put_line(v_city(i));
  else dbms_output.put_line(i || ' 요소가 존재하지 않습니다.');
 end if;
 end loop;
end;
/
---------------------------------------------------------

declare
  type tab_char_type is varray(5) of varchar2(10);	#varray(i) :i개로 갯수 제한/5자리 최대
  v_city tab_char_type := tab_char_type('서울','부산','대전');
begin
  for i in v_city.first..v_city.last loop
  dbms_output.put_line(v_city(i));
 end loop;
end;
/
#varray(5)로 값을 설정했고 삽입은 3개만 된 상태에서 
  다른 데이터를 추가하더라도 나머지 두 자리에 추가가 되지 않는다.
  만일 추가를 원한다면 extend로 확장 후 추가.

-------------------------
declare
  type tab_char_type is varray(5) of varchar2(10);
  v_city tab_char_type := tab_char_type('서울','부산','대전');
begin
  v_city.extend(2);
  v_city(4) :='광주';
  v_city(5) :='대구';
  for i in v_city.first..v_city.last loop
  dbms_output.put_line(v_city(i));
 end loop;
end;
/
---------------------------------------------------------

#cursor :메모리 포인터, sql문 실행 메모리 영역
##implict cursor(암시적 커서)
   1. 커서를 오라클이 생성, 관리한다.
   2. select .. into .....(반드시 한 개의 row만 fetch 해야한다.)
   3. dml(insert, update, delete, merge)의 결과를 판단하는 속성
   4. 암시적 커서 속성 : sql%rowcount, sql%found, sql%notfound

##explicit cursor(명시적 커서)
   1. 여러 개의 row를 fetch해야 한다면 명시적 커서를 사용.
   2. 프로그래머가 커서를 생성, 관리해야 한다.

declare
  /*1. 커서 선언*/
  cursor emp_cur is select last_name from employees where department_id=20;
  v_name varchar2(30);	#만일 별칭을 사용했다면 별칭이 필드명이 된다.
begin			#위와 같이 선언해주면 begin문 어디에서든 사용 가능
  /*2. 커서 open :메모리 할당, parse, bind, fetch*/
  open emp_cur;
  /*3. fetch :커서에 있는 active set 결과를 변수에 로드하는 단계*/
  loop
  fetch emp_cur into v_name;	#fetch문은 loop구조 안에서 반복해되야 한다.
  exit when emp_cur%notfound;	#명시적 커서%notfound
  dbms_output.put_line(v_name);	  :커서에서 fetch한 것이 없는 경우 참→exist
  end loop;
 /*4. 커서 close :메모리 해지*/
 close emp_cur;
end;
/
-------------------------

declare
  cursor emp_cur is select e.last_name, e.salary, d.department_name
  from employees e, departments d
  where e.department_id=20 and d.department_id=20;

  v_rec emp_cur%rowtype;
begin	#커서를 기반으로 하는 레코드 변수를 만들어라/테이블로 지정하면 안된다.
  open emp_cur;
  loop
  fetch emp_cur into v_rec;
  exit when emp_cur%notfound;
  dbms_output.put_line(v_rec.last_name);
  dbms_output.put_line(v_rec.salary);
  dbms_output.put_line(v_rec.department_name);
  end loop;
 close emp_cur;
end;
/
-------------------------

declare
  cursor emp_cur is select e.last_name, e.salary, d.department_name
  from employees e, departments d
  where e.department_id=20 and d.department_id=20;

  v_name varchar2(30);
  v_sal number;
  v_dept_name varchar2(30);
begin
  open emp_cur;
  loop
  fetch emp_cur into v_name, v_sal, v_dept_name;
  exit when emp_cur%notfound;
  dbms_output.put_line(v_name);
  dbms_output.put_line(v_sal);
  dbms_output.put_line(v_dept_name);
  end loop;
 close emp_cur;
end;
/
-------------------------

declare
  cursor emp_cur is select * from employees where department_id=20;
begin
  for emp_rec in emp_cur loop
  dbms_output.put_line(emp_rec.last_name);
 end loop;
end;
/
#for 문 이하
1. 커서를 기반으로 해서 레코드 변수를 암시적으로 생성된다(=자동 생성)
2. open, fetch 단계를 자동으로 실행한다. 
3. for문 안에서만 사용가능
4. open 시점에 active set 결과가 있는 경우에만 실행된다.

---------------------------------------------------------

#명시적 커서 속성
1. 명시적 커서 이름%notfound :fetch한 것이 없으면 참, 있으면 거짓
2. 명시적 커서 이름%found :fetch한 것이 있으면 참, 없으면 거짓
3. 명시적 커서 이름%rowcont :fetch한 건수
4. 명시적 커서 이름%isopen :명시적 커서가 오픈 되어 있으면 참, 닫혀있으면 거짓




